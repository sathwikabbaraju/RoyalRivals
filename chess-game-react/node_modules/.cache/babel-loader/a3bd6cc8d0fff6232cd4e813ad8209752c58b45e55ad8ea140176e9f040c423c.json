{"ast":null,"code":"var _jsxFileName = \"/Users/sathwik/VISUAL STUDIO CODE/Streamlit/ChessGame/chess-game-react/src/Game.js\",\n  _s = $RefreshSig$();\nimport { Card, CardContent, List, ListItem, ListItemText, ListSubheader, Stack, Typography, Box } from \"@mui/material\";\nimport { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport CustomDialog from \"./components/CustomDialog\";\nimport socket from \"./socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game({\n  players,\n  room,\n  orientation,\n  cleanup\n}) {\n  _s();\n  const chess = useMemo(() => new Chess(), []); // <- 1\n  const [fen, setFen] = useState(chess.fen()); // <- 2\n  const [over, setOver] = useState(\"\");\n  const makeAMove = useCallback(move => {\n    try {\n      const result = chess.move(move); // update Chess instance\n      setFen(chess.fen()); // update fen state to trigger a re-render\n\n      console.log(\"over, checkmate\", chess.isGameOver(), chess.isCheckmate());\n      if (chess.isGameOver()) {\n        // check if move led to \"game over\"\n        if (chess.isCheckmate()) {\n          // if reason for game over is a checkmate\n          // Set message to checkmate. \n          setOver(`Checkmate! ${chess.turn() === \"w\" ? \"black\" : \"white\"} wins!`);\n          // The winner is determined by checking for which side made the last move\n        } else if (chess.isDraw()) {\n          // if it is a draw\n          setOver(\"Draw\"); // set message to \"Draw\"\n        } else {\n          setOver(\"Game over\");\n        }\n      }\n      return result;\n    } catch (e) {\n      return null;\n    } // null if the move was illegal, the move object if the move was legal\n  }, [chess]);\n\n  // onDrop function\n  function onDrop(sourceSquare, targetSquare) {\n    // orientation is either 'white' or 'black'. game.turn() returns 'w' or 'b'\n    if (chess.turn() !== orientation[0]) return false; // <- 1 prohibit player from moving piece of other player\n\n    if (players.length < 2) return false; // <- 2 disallow a move if the opponent has not joined\n\n    const moveData = {\n      from: sourceSquare,\n      to: targetSquare,\n      color: chess.turn(),\n      promotion: \"q\" // promote to queen where possible\n    };\n    const move = makeAMove(moveData);\n\n    // illegal move\n    if (move === null) return false;\n    socket.emit(\"move\", {\n      // <- 3 emit a move event.\n      move,\n      room\n    }); // this event will be transmitted to the opponent via the server\n\n    return true;\n  }\n  useEffect(() => {\n    socket.on(\"move\", move => {\n      makeAMove(move); //\n    });\n  }, [makeAMove]);\n\n  // Game component returned jsx\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: [\"Room ID: \", room]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      flexDirection: \"row\",\n      sx: {\n        pt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        style: {\n          maxWidth: 600,\n          maxHeight: 600,\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          onPieceDrop: onDrop,\n          boardOrientation: orientation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), players.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [/*#__PURE__*/_jsxDEV(ListSubheader, {\n            children: \"Players\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), players.map(p => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: p.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this)\n          }, p.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CustomDialog // Game Over CustomDialog\n    , {\n      open: Boolean(over),\n      title: over,\n      contentText: over,\n      handleContinue: () => {\n        setOver(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n}\n_s(Game, \"JjGmntZkyHtS2UMYHCFtrIX5sco=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Card","CardContent","List","ListItem","ListItemText","ListSubheader","Stack","Typography","Box","useState","useMemo","useCallback","useEffect","Chessboard","Chess","CustomDialog","socket","jsxDEV","_jsxDEV","Game","players","room","orientation","cleanup","_s","chess","fen","setFen","over","setOver","makeAMove","move","result","console","log","isGameOver","isCheckmate","turn","isDraw","e","onDrop","sourceSquare","targetSquare","length","moveData","from","to","color","promotion","emit","on","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","sx","pt","className","style","maxWidth","maxHeight","flexGrow","position","onPieceDrop","boardOrientation","map","p","primary","username","id","open","Boolean","title","contentText","handleContinue","_c","$RefreshReg$"],"sources":["/Users/sathwik/VISUAL STUDIO CODE/Streamlit/ChessGame/chess-game-react/src/Game.js"],"sourcesContent":["import {\n    Card,\n    CardContent,\n    List,\n    ListItem,\n    ListItemText,\n    ListSubheader,\n    Stack,\n    Typography,\n    Box,\n  } from \"@mui/material\";\n  import { useState, useMemo, useCallback, useEffect } from \"react\";\n  import { Chessboard } from \"react-chessboard\";\n  import { Chess } from \"chess.js\";\n  import CustomDialog from \"./components/CustomDialog\";\n  import socket from \"./socket\";\n  \n  function Game({ players, room, orientation, cleanup }) {\n    const chess = useMemo(() => new Chess(), []); // <- 1\n    const [fen, setFen] = useState(chess.fen()); // <- 2\n    const [over, setOver] = useState(\"\");\n  \n    const makeAMove = useCallback(\n      (move) => {\n        try {\n          const result = chess.move(move); // update Chess instance\n          setFen(chess.fen()); // update fen state to trigger a re-render\n    \n          console.log(\"over, checkmate\", chess.isGameOver(), chess.isCheckmate());\n    \n          if (chess.isGameOver()) { // check if move led to \"game over\"\n            if (chess.isCheckmate()) { // if reason for game over is a checkmate\n              // Set message to checkmate. \n              setOver(\n                `Checkmate! ${chess.turn() === \"w\" ? \"black\" : \"white\"} wins!`\n              ); \n              // The winner is determined by checking for which side made the last move\n            } else if (chess.isDraw()) { // if it is a draw\n              setOver(\"Draw\"); // set message to \"Draw\"\n            } else {\n              setOver(\"Game over\");\n            }\n          }\n    \n          return result;\n        } catch (e) {\n          return null;\n        } // null if the move was illegal, the move object if the move was legal\n      },\n      [chess]\n    );\n  \n    // onDrop function\n    function onDrop(sourceSquare, targetSquare) {\n      // orientation is either 'white' or 'black'. game.turn() returns 'w' or 'b'\n      if (chess.turn() !== orientation[0]) return false; // <- 1 prohibit player from moving piece of other player\n  \n      if (players.length < 2) return false; // <- 2 disallow a move if the opponent has not joined\n  \n      const moveData = {\n        from: sourceSquare,\n        to: targetSquare,\n        color: chess.turn(),\n        promotion: \"q\", // promote to queen where possible\n      };\n  \n      const move = makeAMove(moveData);\n  \n      // illegal move\n      if (move === null) return false;\n  \n      socket.emit(\"move\", { // <- 3 emit a move event.\n        move,\n        room,\n      }); // this event will be transmitted to the opponent via the server\n  \n      return true;\n    }\n  \n    useEffect(() => {\n      socket.on(\"move\", (move) => {\n        makeAMove(move); //\n      });\n    }, [makeAMove]);\n    \n    // Game component returned jsx\n    return (\n      <Stack>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h5\">Room ID: {room}</Typography>\n          </CardContent>\n        </Card>\n        <Stack flexDirection=\"row\" sx={{ pt: 2 }}>\n          <div className=\"board\" style={{\n            maxWidth: 600,\n            maxHeight: 600,\n            flexGrow: 1,\n          }}>\n            <Chessboard\n              position={fen}\n              onPieceDrop={onDrop}\n              boardOrientation={orientation}\n            />\n          </div>\n          {players.length > 0 && (\n            <Box>\n              <List>\n                <ListSubheader>Players</ListSubheader>\n                {players.map((p) => (\n                  <ListItem key={p.id}>\n                    <ListItemText primary={p.username} />\n                  </ListItem>\n                ))}\n              </List>\n            </Box>\n          )}\n        </Stack>\n        <CustomDialog // Game Over CustomDialog\n          open={Boolean(over)}\n          title={over}\n          contentText={over}\n          handleContinue={() => {\n            setOver(\"\");\n          }}\n        />\n      </Stack>\n    );\n  }\n  \n  export default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}